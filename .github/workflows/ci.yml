name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: True

jobs:
    test:
        name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
        runs-on: ${{ matrix.os }}

        strategy:
            fail-fast: false
            matrix:
                include:
                    - os: ubuntu-latest
                      python-version: "3.12"
                    - os: ubuntu-latest
                      python-version: "3.13"
                    - os: macos-latest
                      python-version: "3.12"
                    - os: macos-latest
                      python-version: "3.13"

        steps:
        - uses: actions/checkout@v4
          with:
            submodules: true

        - name: Install OS dependencies
          shell: bash -l {0}
          run: |
            case "${{ runner.os }}" in
            Linux)
              sudo apt-get update -yy
              sudo apt-get install -yy wget libsndfile-dev libsox-fmt-mp3 ffmpeg zip
              ;; 
            macOS)
              brew install libsamplerate wget libsndfile sox ffmpeg zip
              ;;
            esac

        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v5
          with:
            python-version: ${{ matrix.python-version }}
            cache: 'pip'

        - name: Install Poetry
          uses: snok/install-poetry@v1
          with:
            version: latest
            virtualenvs-create: true
            virtualenvs-in-project: true

        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v4
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

        - name: Install dependencies
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
          run: poetry install --no-interaction --with dev,optional

        - name: Run tests
          run: poetry run pytest

        - name: Upload coverage to Codecov
          uses: codecov/codecov-action@v4
          with:
            token: ${{ secrets.CODECOV_TOKEN }}
            files: ./coverage.xml
            directory: ./coverage/reports/
            flags: unittests
            env_vars: OS,PYTHON
            name: codecov-umbrella
            fail_ci_if_error: true
            verbose: true